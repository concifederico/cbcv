#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# generated by wxGlade 0.7.2 on Sun Jul  9 22:42:05 2017
#

import wx
import csv
import os.path
import numpy as np
import datetime

from numpy import arange, sin, pi
import matplotlib
import globvar

matplotlib.use('WXAgg')

from matplotlib.backends.backend_wxagg import FigureCanvasWxAgg as FigureCanvas
from matplotlib.backends.backend_wx import NavigationToolbar2Wx as NavigationToolbar, wxc
from matplotlib.figure import Figure
from matplotlib.dates import strpdate2num

import wx.lib.mixins.inspection as WIT

# begin wxGlade: dependencies
# end wxGlade

# begin wxGlade: extracode
# end wxGlade

global s

def str2bool(v):
    return v.lower() in ("yes", "true", "t", "1")

def datestr2num(s):
    return datetime.datetime.strptime(s, '%Y-%m-%dT%H:%M:%S')

class wxVideoFrame(wx.Frame):

    global s

    def __init__(self, *args, **kwds):
        # begin wxGlade: wxVideoFrame.__init__
        style = (wx.DEFAULT_FRAME_STYLE | wx.MAXIMIZE) & ~ (wx.RESIZE_BORDER | wx.MINIMIZE_BOX)
        wx.Frame.__init__(self, *args, **kwds)
        #self.ShowFullScreen(True)
        self.window_1 = wx.SplitterWindow(self, wx.ID_ANY)
        self.window_1_pane_1 = wx.Panel(self.window_1, wx.ID_ANY)
        self.m_panelVideo = wx.Panel(self.window_1_pane_1, wx.ID_ANY)
        self.window_1_pane_2 = wx.Panel(self.window_1, wx.ID_ANY)
        self.notebook_5 = wx.Notebook(self.window_1_pane_2, wx.ID_ANY)
        self.notebook_5_pane_1 = wx.Panel(self.notebook_5, wx.ID_ANY)
        self.button_inicio = wx.ToggleButton(self.notebook_5_pane_1, wx.ID_ANY, "Inicio")
        self.combo_box_tiempo = wx.ComboBox(self.notebook_5_pane_1, wx.ID_ANY,
                                            choices=globvar.LTiempos["Tiempo"],
                                            style=wx.CB_READONLY | wx.CB_DROPDOWN)  # Settings 1
        self.label_4 = wx.StaticText(self.notebook_5_pane_1, wx.ID_ANY, "Largo (mm)", style=wx.ALIGN_CENTER)
        self.label_largo = wx.StaticText(self.notebook_5_pane_1, wx.ID_ANY, "0.0", style=wx.ALIGN_CENTER)
        self.label_5 = wx.StaticText(self.notebook_5_pane_1, wx.ID_ANY, u"Di\u00e1metro equivalente (mm)")
        self.label_angulo = wx.StaticText(self.notebook_5_pane_1, wx.ID_ANY, "0.0", style=wx.ALIGN_CENTER)
        self.label_6 = wx.StaticText(self.notebook_5_pane_1, wx.ID_ANY, "Diferencia ancho-largo (mm)")
        self.label_diametro = wx.StaticText(self.notebook_5_pane_1, wx.ID_ANY, "0.0", style=wx.ALIGN_CENTER)
        self.label_7 = wx.StaticText(self.notebook_5_pane_1, wx.ID_ANY, u"\u00c1ngulo", style=wx.ALIGN_CENTER)
        self.label_diferencia = wx.StaticText(self.notebook_5_pane_1, wx.ID_ANY, "0.0", style=wx.ALIGN_CENTER)
        #self.label_7_copy = wx.StaticText(self.notebook_5_pane_1, wx.ID_ANY, u"Tiempo de residencia (min)",style=wx.ALIGN_CENTER)
        #self.label_tiempococcion = wx.StaticText(self.notebook_5_pane_1, wx.ID_ANY, "0.0", style=wx.ALIGN_CENTER)
        self.label_7_copy_copy = wx.StaticText(self.notebook_5_pane_1, wx.ID_ANY, "Largo < LIE (%)",style=wx.ALIGN_CENTER)
        self.label_diametrolie = wx.StaticText(self.notebook_5_pane_1, wx.ID_ANY, "0.0", style=wx.ALIGN_CENTER)
        self.label_7_copy_copy_1 = wx.StaticText(self.notebook_5_pane_1, wx.ID_ANY, "Largo optimo (%)",
                                                 style=wx.ALIGN_CENTER)
        self.label_diametrooptimo = wx.StaticText(self.notebook_5_pane_1, wx.ID_ANY, "0.0", style=wx.ALIGN_CENTER)
        self.label_7_copy_copy_1_copy = wx.StaticText(self.notebook_5_pane_1, wx.ID_ANY, "Largo > LSE (%)",
                                                      style=wx.ALIGN_CENTER)
        self.label_diametrolse = wx.StaticText(self.notebook_5_pane_1, wx.ID_ANY, "0.0", style=wx.ALIGN_CENTER)
        self.label_7_copy_copy_1_copy_copy = wx.StaticText(self.notebook_5_pane_1, wx.ID_ANY, "FPS",
                                                           style=wx.ALIGN_CENTER)
        self.label_FPS = wx.StaticText(self.notebook_5_pane_1, wx.ID_ANY, "0.0", style=wx.ALIGN_CENTER)
        self.label_7_copy_copy_1_copy_copy_copy = wx.StaticText(self.notebook_5_pane_1, wx.ID_ANY, "Progreso de medición",
                                                                style=wx.ALIGN_CENTER)
        self.gauge_1 = wx.Gauge(self.notebook_5_pane_1, wx.ID_ANY, 100)
        self.notebook_5_pane_2 = wx.Panel(self.notebook_5, wx.ID_ANY)
        self.notebook_7 = wx.Notebook(self.notebook_5_pane_2, wx.ID_ANY)
        self.notebook_7_pane_1 = wx.Panel(self.notebook_7, wx.ID_ANY)
        self.label_vidoverlay = wx.StaticText(self.notebook_7_pane_1, wx.ID_ANY, "Ubicación")
        self.text_ctrl_vidoverlay = wx.TextCtrl(self.notebook_7_pane_1, wx.ID_ANY, "")  # Settings 0
        self.label_3 = wx.StaticText(self.notebook_7_pane_1, wx.ID_ANY, "Ancho de banda")
        self.spin_ctrl_anchobanda = wx.SpinCtrl(self.notebook_7_pane_1, wx.ID_ANY, "1200", min=0,
                                                max=2000)  # Settings 2
        self.label_3_copy_1 = wx.StaticText(self.notebook_7_pane_1, wx.ID_ANY, "Lateral inferior de banda")
        self.slider_laterali = wx.Slider(self.notebook_7_pane_1, wx.ID_ANY, 0, 0, 2000,
                                         style=wx.SL_AUTOTICKS | wx.SL_HORIZONTAL | wx.SL_LABELS)  # Settings 3
        self.label_3_copy = wx.StaticText(self.notebook_7_pane_1, wx.ID_ANY, "Lateral superior de banda")
        self.slider_laterals = wx.Slider(self.notebook_7_pane_1, wx.ID_ANY, 0, 0, 2000,
                                         style=wx.SL_AUTOTICKS | wx.SL_HORIZONTAL | wx.SL_LABELS)  # Settings 23
        self.label_calib= wx.StaticText(self.notebook_7_pane_1, wx.ID_ANY, "Calibracion")
        self.slider_calib = wx.Slider(self.notebook_7_pane_1, wx.ID_ANY, 0, -100, 100,
                                         style=wx.SL_AUTOTICKS | wx.SL_HORIZONTAL | wx.SL_LABELS)  # Settings 4
        self.label_3_copy_copy = wx.StaticText(self.notebook_7_pane_1, wx.ID_ANY, "Filas de objetos")
        self.spin_ctrl_filas = wx.SpinCtrl(self.notebook_7_pane_1, wx.ID_ANY, "16", min=0, max=30)  # Settings 5
        self.radio_btn_1 = wx.RadioButton(self.notebook_7_pane_1, wx.ID_ANY, "Entrada de video de dispositivo",
                                          style=wx.RB_GROUP)  # Settings 6a
        self.radio_btn_2 = wx.RadioButton(self.notebook_7_pane_1, wx.ID_ANY,
                                          "Entrada de video de archivo")  # Settings 6b
        self.spin_ctrl_dispositivo = wx.SpinCtrl(self.notebook_7_pane_1, wx.ID_ANY, "", min=0, max=10)  # Settings 7
        self.text_ctrl_archivo = wx.TextCtrl(self.notebook_7_pane_1, wx.ID_ANY, "")  # Settings 8
        self.button_2 = wx.Button(self.notebook_7_pane_1, wx.ID_ANY, "Abrir video")
        self.label_8 = wx.StaticText(self.notebook_7_pane_1, wx.ID_ANY, u"Rotaci\u00f3n de video de entrada")
        self.radio_btn_0 = wx.RadioButton(self.notebook_7_pane_1, wx.ID_ANY, u"0\u00ba",
                                          style=wx.RB_GROUP)  # Settings 9
        self.radio_btn_90 = wx.RadioButton(self.notebook_7_pane_1, wx.ID_ANY, u"90\u00ba")
        self.radio_btn_180 = wx.RadioButton(self.notebook_7_pane_1, wx.ID_ANY, u"180\u00ba")
        self.radio_btn_270 = wx.RadioButton(self.notebook_7_pane_1, wx.ID_ANY, u"270\u00ba")
        self.button_VidStart = wx.Button(self.notebook_7_pane_1, wx.ID_ANY, "Iniciar entrada")
        self.checkbox_iniciar = wx.CheckBox(self.notebook_7_pane_1, wx.ID_ANY,
                                            "Iniciar medicion al iniciar")  # Settings 10
        self.notebook_7_pane_2 = wx.Panel(self.notebook_7, wx.ID_ANY)
        self.Min_copy_5_copy_1 = wx.StaticText(self.notebook_7_pane_2, wx.ID_ANY, "Objeto")

        self.combo_box_Objeto = wx.ComboBox(self.notebook_7_pane_2, wx.ID_ANY, choices=globvar.Objetos["Objeto"],
                                             style=wx.CB_DROPDOWN | wx.CB_READONLY)  # Settings 11
        self.Min_copy_5 = wx.StaticText(self.notebook_7_pane_2, wx.ID_ANY, "Tonalidad Min")
        self.slider_hmin = wx.Slider(self.notebook_7_pane_2, wx.ID_ANY, 0, 0, 255,
                                     style=wx.SL_HORIZONTAL | wx.SL_LABELS | wx.SL_SELRANGE)  # Settings 12
        self.Min_copy_2 = wx.StaticText(self.notebook_7_pane_2, wx.ID_ANY, "Tonalidad Max")
        self.slider_hmax = wx.Slider(self.notebook_7_pane_2, wx.ID_ANY, 33, 0, 255,
                                     style=wx.SL_HORIZONTAL | wx.SL_LABELS | wx.SL_SELRANGE)  # Settings 13
        self.Min_copy = wx.StaticText(self.notebook_7_pane_2, wx.ID_ANY, "Saturación Min")
        self.slider_smin = wx.Slider(self.notebook_7_pane_2, wx.ID_ANY, 0, 0, 255,
                                     style=wx.SL_HORIZONTAL | wx.SL_LABELS | wx.SL_SELRANGE)  # Settings 14
        self.Min_copy_3 = wx.StaticText(self.notebook_7_pane_2, wx.ID_ANY, "Saturación  Max")
        self.slider_smax = wx.Slider(self.notebook_7_pane_2, wx.ID_ANY, 85, 0, 255,
                                     style=wx.SL_HORIZONTAL | wx.SL_LABELS | wx.SL_SELRANGE)  # Settings 15
        self.Min_copy_1 = wx.StaticText(self.notebook_7_pane_2, wx.ID_ANY, "Brillo Min")
        self.slider_vmin = wx.Slider(self.notebook_7_pane_2, wx.ID_ANY, 171, 0, 255,
                                     style=wx.SL_HORIZONTAL | wx.SL_LABELS | wx.SL_SELRANGE)  # Settings 16
        self.Min_copy_4 = wx.StaticText(self.notebook_7_pane_2, wx.ID_ANY, "Brillo Max")
        self.slider_vmax = wx.Slider(self.notebook_7_pane_2, wx.ID_ANY, 255, 0, 255,
                                     style=wx.SL_HORIZONTAL | wx.SL_LABELS | wx.SL_SELRANGE)  # Settings 17
        self.Min_copy_5_copy = wx.StaticText(self.notebook_7_pane_2, wx.ID_ANY, "Banda de aproximación y salida")
        self.slider_desperado = wx.Slider(self.notebook_7_pane_2, wx.ID_ANY, 50, 0, 400,
                                          style=wx.SL_HORIZONTAL | wx.SL_LABELS | wx.SL_SELRANGE)  # Settings 18
        self.label_prefiltro= wx.StaticText(self.notebook_7_pane_2, wx.ID_ANY, "Prefiltro de pixeles Min")
        self.slider_prefiltro = wx.Slider(self.notebook_7_pane_2, wx.ID_ANY, 500, 0, 1000,
                                          style=wx.SL_HORIZONTAL | wx.SL_LABELS | wx.SL_SELRANGE)  # Settings 18b
        self.notebook_7_pane_3 = wx.Panel(self.notebook_7, wx.ID_ANY)
        self.label_1 = wx.StaticText(self.notebook_7_pane_3, wx.ID_ANY, "Refresco del display (s)")
        self.spin_button_display = wx.SpinButton(self.notebook_7_pane_3, wx.ID_ANY)  # Settings 19
        self.label_2 = wx.StaticText(self.notebook_7_pane_3, wx.ID_ANY, "Registro (ciclos de Refresco)")
        self.spin_button_registro = wx.SpinButton(self.notebook_7_pane_3, wx.ID_ANY)  # Settings 20
        self.checkbox_csv = wx.CheckBox(self.notebook_7_pane_3, wx.ID_ANY, "CSV")  # Settings 21

        self.checkbox_AdvOverlay = wx.CheckBox(self.notebook_7_pane_3, wx.ID_ANY, "Ayudas visuales (Reducen rendimiento)")  # Settings 22

        self.notebook_5_pane_3 = wx.Panel(self.notebook_5, wx.ID_ANY)
        self.label_9 = wx.StaticText(self.notebook_5_pane_3, wx.ID_ANY, "cbcv v1\n\n 2017 - Federico S. Conci")
        #self.notebook_21 = wx.Notebook(self.window_1_pane_2, wx.ID_ANY)
        self.notebook_5_pane_4 = wx.Panel(self.notebook_5, wx.ID_ANY)
        #self.label_10 = wx.StaticText(self.notebook_21_pane_1, wx.ID_ANY, "label_12")
        self.notebook_5_pane_5 = wx.Panel(self.notebook_5, wx.ID_ANY)
        self.notebook_5_pane_6 = wx.Panel(self.notebook_5, wx.ID_ANY)
        self.notebook_5_pane_7 = wx.Panel(self.notebook_5, wx.ID_ANY)
        self.notebook_5_pane_8 = wx.Panel(self.notebook_5, wx.ID_ANY)
        self.notebook_5_pane_9 = wx.Panel(self.notebook_5, wx.ID_ANY)

        if os.path.isfile(os.path.realpath(__file__)[
                          :-len(os.path.basename(os.path.realpath(__file__)))] + "settings.ini") == True:
            sf = open(os.path.realpath(__file__)[:-len(os.path.basename(os.path.realpath(__file__)))] + "settings.ini",
                      "r")
            self.text_ctrl_vidoverlay.SetValue(sf.readline()[:-1])  # Settings 0
            self.combo_box_tiempo.SetValue(sf.readline()[:-1])  # Settings 1
            self.spin_ctrl_anchobanda.SetValue(int(sf.readline()[:-1]))  # Settings 2
            self.slider_laterali.SetValue(int(sf.readline()[:-1]))  # Settings 3
            self.slider_laterals.SetValue(int(sf.readline()[:-1]))  # Settings 4
            self.spin_ctrl_filas.SetValue(int(sf.readline()[:-1]))  # Settings 5
            # Settings 6
            x = int(sf.readline()[:-1])
            if x == 1:
                self.radio_btn_1.SetValue(1)
                self.radio_btn_2.SetValue(0)
                self.button_2.Disable()
                self.text_ctrl_archivo.Disable()
                self.spin_ctrl_dispositivo.Enable()
                globvar.VideoWebCam = True

            if x == 2:
                self.radio_btn_2.SetValue(1)
                self.radio_btn_1.SetValue(0)
                self.button_2.Enable()
                self.text_ctrl_archivo.Enable()
                self.spin_ctrl_dispositivo.Disable()
                globvar.VideoWebCam = False

            self.spin_ctrl_dispositivo.SetValue(int(sf.readline()[:-1]))  # Settings 7
            globvar.Dispositivo = self.spin_ctrl_dispositivo.GetValue()
            self.text_ctrl_archivo.SetValue(sf.readline()[:-1])  # Settings 8

            # Settings 9
            x = int(sf.readline()[:-1])
            if x == 0:
                self.radio_btn_0.SetValue(1)
            if x == 90:
                self.radio_btn_90.SetValue(1)
            if x == 180:
                self.radio_btn_180.SetValue(1)
            if x == 270:
                self.radio_btn_270.SetValue(1)
            self.checkbox_iniciar.SetValue(str2bool(sf.readline()[:-1]))  # Settings 10

            self.combo_box_Objeto.SetValue(sf.readline()[:-1])  # Settings 11



            globvar.LIE = 50
            globvar.LSE = 58

            self.slider_hmin.SetValue(int(sf.readline()[:-1]))  # Settings 12
            self.slider_hmax.SetValue(int(sf.readline()[:-1]))  # Settings 13
            self.slider_smin.SetValue(int(sf.readline()[:-1]))  # Settings 14
            self.slider_smax.SetValue(int(sf.readline()[:-1]))  # Settings 15
            self.slider_vmin.SetValue(int(sf.readline()[:-1]))  # Settings 16
            self.slider_vmax.SetValue(int(sf.readline()[:-1]))  # Settings 17
            self.slider_desperado.SetValue(int(sf.readline()[:-1]))  # Settings 18
            self.slider_prefiltro.SetValue(int(sf.readline()[:-1]))  # Settings 18b
            self.spin_button_display.SetValue(int(sf.readline()[:-1]))  # Settings 19
            self.spin_button_display.SetRange(1,1800)
            self.spin_button_registro.SetValue(int(sf.readline()[:-1]))  # Settings 20
            self.checkbox_csv.SetValue(str2bool(sf.readline()[:-1]))  # Settings 21
            self.checkbox_AdvOverlay.SetValue(str2bool(sf.readline()[:-1]))  # Settings 22

            globvar.IniciaralInicio = self.checkbox_iniciar.GetValue()

            self.slider_calib.SetValue(int(sf.readline()[:-1]))  # Settings 23
            globvar.TSi = int(sf.readline()[:-1]) # Settings 24
            sf.close()

            if os.path.isfile(os.path.realpath(__file__)[
                          :-len(os.path.basename(os.path.realpath(__file__)))] + "TS.db") == True:
                globvar.TS = np.loadtxt(os.path.realpath(__file__)[:-len(os.path.basename(os.path.realpath(__file__)))] + "TS.db", converters= {0:datestr2num}, delimiter=',', dtype=[('Fecha','datetime64[s]'), ('Objeto','S10'), ('Largo','float'), ('Diametro','float'), ('LIE','float'), ('LSE','float'), ('Produciendo','int')])

            #self.notebook_21.SetMinSize((600, 400))

            # if self.checkbox_iniciar.GetValue() == True:
            # self.EnInicio(self)
            # self.VideoStart(self)

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_TOGGLEBUTTON, self.EnInicio, self.button_inicio)
        self.Bind(wx.EVT_COMBOBOX, self.EnComboTiempo, self.combo_box_tiempo)
        self.Bind(wx.EVT_SPINCTRL, self.EnAnchoBanda, self.spin_ctrl_anchobanda)
        self.Bind(wx.EVT_COMMAND_SCROLL, self.EnLateralI, self.slider_laterali)
        self.Bind(wx.EVT_COMMAND_SCROLL, self.EnLateralS, self.slider_laterals)
        self.Bind(wx.EVT_COMMAND_SCROLL, self.EnCalib, self.slider_calib)
        self.Bind(wx.EVT_SPINCTRL, self.EnFilas, self.spin_ctrl_filas)
        self.Bind(wx.EVT_RADIOBUTTON, self.VidDispo, self.radio_btn_1)
        self.Bind(wx.EVT_RADIOBUTTON, self.VidArchivo, self.radio_btn_2)
        self.Bind(wx.EVT_SPINCTRL, self.VidDispoCtrl, self.spin_ctrl_dispositivo)
        self.Bind(wx.EVT_TEXT, self.VideoArchivo, self.text_ctrl_archivo)
        self.Bind(wx.EVT_TEXT, self.Envidoverlay, self.text_ctrl_vidoverlay)
        self.Bind(wx.EVT_BUTTON, self.AbrirArchivo, self.button_2)
        self.Bind(wx.EVT_RADIOBUTTON, self.rot0, self.radio_btn_0)
        self.Bind(wx.EVT_RADIOBUTTON, self.rot90, self.radio_btn_90)
        self.Bind(wx.EVT_RADIOBUTTON, self.rot180, self.radio_btn_180)
        self.Bind(wx.EVT_RADIOBUTTON, self.rot270, self.radio_btn_270)
        self.Bind(wx.EVT_BUTTON, self.VideoStart, self.button_VidStart)
        self.Bind(wx.EVT_CHECKBOX, self.Iniciarmedicionauto, self.checkbox_iniciar)
        self.Bind(wx.EVT_COMBOBOX, self.EnObjeto, self.combo_box_Objeto)
        self.Bind(wx.EVT_COMMAND_SCROLL, self.EnHMin, self.slider_hmin)
        self.Bind(wx.EVT_COMMAND_SCROLL, self.EnHMax, self.slider_hmax)
        self.Bind(wx.EVT_COMMAND_SCROLL, self.EnSMin, self.slider_smin)
        self.Bind(wx.EVT_COMMAND_SCROLL, self.EnSMax, self.slider_smax)
        self.Bind(wx.EVT_COMMAND_SCROLL, self.EnVMin, self.slider_vmin)
        self.Bind(wx.EVT_COMMAND_SCROLL, self.EnVMax, self.slider_vmax)
        self.Bind(wx.EVT_COMMAND_SCROLL, self.EnDesperado, self.slider_desperado)
        self.Bind(wx.EVT_COMMAND_SCROLL, self.EnPrefiltro, self.slider_prefiltro)
        self.Bind(wx.EVT_SPIN, self.EnDisplay, self.spin_button_display)
        self.Bind(wx.EVT_SPIN, self.EnRegistro, self.spin_button_registro)
        self.Bind(wx.EVT_CHECKBOX, self.EnCSV, self.checkbox_csv)
        self.Bind(wx.EVT_CHECKBOX, self.EnAdvOverlay, self.checkbox_AdvOverlay)
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: wxVideoFrame.__set_properties
        self.SetTitle("cbcv v1")
        self.SetSize((1, 1))
        self.SetFocus()
        #self.m_panelVideo.SetMinSize((1605, 720))
        #self.window_1_pane_1.SetMinSize((800, 720))
        #self.label_largo.SetBackgroundColour(wx.SystemSettings.GetColour(wx.SYS_COLOUR_3DSHADOW))
        self.label_largo.SetForegroundColour(wx.Colour(0, 0, 127))
        self.label_largo.SetFont(wx.Font(30, wx.SWISS, wx.NORMAL, wx.BOLD, 0, ""))
        #self.label_diametro.SetBackgroundColour(wx.SystemSettings.GetColour(wx.SYS_COLOUR_3DSHADOW))
        self.label_diametro.SetForegroundColour(wx.Colour(0, 0, 127))
        self.label_diametro.SetFont(wx.Font(20, wx.SWISS, wx.NORMAL, wx.BOLD, 0, ""))
        #self.label_diferencia.SetBackgroundColour(wx.SystemSettings.GetColour(wx.SYS_COLOUR_3DSHADOW))
        self.label_diferencia.SetForegroundColour(wx.Colour(0, 0, 127))
        self.label_diferencia.SetFont(wx.Font(20, wx.SWISS, wx.NORMAL, wx.BOLD, 0, ""))
        #self.label_angulo.SetBackgroundColour(wx.SystemSettings.GetColour(wx.SYS_COLOUR_3DSHADOW))
        self.label_angulo.SetForegroundColour(wx.Colour(0, 0, 127))
        self.label_angulo.SetFont(wx.Font(20, wx.SWISS, wx.NORMAL, wx.BOLD, 0, ""))
        #self.label_tiempococcion.SetBackgroundColour(wx.Colour(0, 0, 127))
        #self.label_tiempococcion.SetForegroundColour(wx.Colour(0, 0, 127))
        #self.label_tiempococcion.SetFont(wx.Font(20, wx.SWISS, wx.NORMAL, wx.BOLD, 0, ""))
        #self.label_diametrolie.SetBackgroundColour(wx.SystemSettings.GetColour(wx.SYS_COLOUR_3DSHADOW))
        self.label_diametrolie.SetForegroundColour(wx.Colour(255, 127, 0))
        self.label_diametrolie.SetFont(wx.Font(20, wx.SWISS, wx.NORMAL, wx.BOLD, 0, ""))
        #self.label_diametrooptimo.SetBackgroundColour(wx.SystemSettings.GetColour(wx.SYS_COLOUR_3DSHADOW))
        self.label_diametrooptimo.SetForegroundColour(wx.Colour(0, 127, 0))
        self.label_diametrooptimo.SetFont(wx.Font(20, wx.SWISS, wx.NORMAL, wx.BOLD, 0, ""))
        #self.label_diametrolse.SetBackgroundColour(wx.SystemSettings.GetColour(wx.SYS_COLOUR_3DSHADOW))
        self.label_diametrolse.SetForegroundColour(wx.Colour(255, 0, 0))
        self.label_diametrolse.SetFont(wx.Font(20, wx.SWISS, wx.NORMAL, wx.BOLD, 0, ""))
        #self.label_FPS.SetBackgroundColour(wx.SystemSettings.GetColour(wx.SYS_COLOUR_3DSHADOW))
        self.label_FPS.SetForegroundColour(wx.Colour(0, 0, 127))
        self.label_FPS.SetFont(wx.Font(20, wx.SWISS, wx.NORMAL, wx.BOLD, 0, ""))

        if os.path.isfile('settings.ini') == False:
            self.combo_box_tiempo.SetSelection(0)
            self.radio_btn_0.SetValue(1)
            self.combo_box_Objeto.SetSelection(0)
            self.text_ctrl_archivo.Enable(False)
            self.button_2.Enable(False)
        else:
            self.EnObjeto(wx.EVT_TOGGLEBUTTON)
            self.EnComboTiempo(wx.EVT_TOGGLEBUTTON)

        self.window_1.SetMinimumPaneSize(30)
        # end wxGlade

    def __do_layout(self):

        icon = wx.EmptyIcon()
        icon.CopyFromBitmap(wx.Bitmap("cbcv.png", wx.BITMAP_TYPE_ANY))
        self.SetIcon(icon)

        # begin wxGlade: wxVideoFrame.__do_layout
        sizer_1 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_3 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_7 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_6 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_5 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_8 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_4 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_f = wx.BoxSizer(wx.VERTICAL)
        sizer_d = wx.BoxSizer(wx.VERTICAL)
        sizer_l = wx.BoxSizer(wx.VERTICAL)
        sizer_sd = wx.BoxSizer(wx.VERTICAL)
        sizer_st = wx.BoxSizer(wx.VERTICAL)
        sizer_det = wx.BoxSizer(wx.VERTICAL)
        grid_sizer_4 = wx.GridSizer(8, 2, 0, 0)
        grid_sizer_1 = wx.GridSizer(9, 2, 0, 0)
        grid_sizer_3 = wx.GridSizer(10, 2, 0, 0)
        sizer_9 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_10 = wx.BoxSizer(wx.VERTICAL)
        grid_sizer_2 = wx.GridSizer(10, 2, 0, 0)
        sizer_2 = wx.BoxSizer(wx.VERTICAL)
        sizer_2.Add(self.m_panelVideo, 1, wx.EXPAND, 0)
        self.window_1_pane_1.SetSizer(sizer_2)

        grid_sizer_2.Add(self.button_inicio, 0, wx.EXPAND, 0)
        grid_sizer_2.Add(self.combo_box_tiempo, 0, wx.EXPAND, 0)
        grid_sizer_2.Add(self.label_4, 0, wx.ALIGN_CENTER, 0)
        grid_sizer_2.Add(self.label_largo, 0, wx.ALIGN_CENTER, 0)
        grid_sizer_2.Add(self.label_5, 0, wx.ALIGN_CENTER, 0)
        grid_sizer_2.Add(self.label_diametro, 0, wx.ALIGN_CENTER, 0)
        grid_sizer_2.Add(self.label_6, 0, wx.ALIGN_CENTER, 0)
        grid_sizer_2.Add(self.label_diferencia, 0, wx.ALIGN_CENTER, 0)
        grid_sizer_2.Add(self.label_7, 0, wx.ALIGN_CENTER, 0)
        grid_sizer_2.Add(self.label_angulo, 0, wx.ALIGN_CENTER, 0)
        #grid_sizer_2.Add(self.label_7_copy, 0, wx.ALIGN_CENTER, 0)
        #grid_sizer_2.Add(self.label_tiempococcion, 0, wx.ALIGN_CENTER, 0)
        grid_sizer_2.Add(self.label_7_copy_copy, 0, wx.ALIGN_CENTER, 0)
        grid_sizer_2.Add(self.label_diametrolie, 0, wx.ALIGN_CENTER, 0)
        grid_sizer_2.Add(self.label_7_copy_copy_1, 0, wx.ALIGN_CENTER, 0)
        grid_sizer_2.Add(self.label_diametrooptimo, 0, wx.ALIGN_CENTER, 0)
        grid_sizer_2.Add(self.label_7_copy_copy_1_copy, 0, wx.ALIGN_CENTER, 0)
        grid_sizer_2.Add(self.label_diametrolse, 0, wx.ALIGN_CENTER, 0)
        grid_sizer_2.Add(self.label_7_copy_copy_1_copy_copy, 0, wx.ALIGN_CENTER, 0)
        grid_sizer_2.Add(self.label_FPS, 0, wx.ALIGN_CENTER, 0)
        grid_sizer_2.Add(self.label_7_copy_copy_1_copy_copy_copy, 0, wx.ALIGN_CENTER, 0)
        grid_sizer_2.Add(self.gauge_1, 0, wx.EXPAND, 0)
        grid_sizer_2.Fit
        self.notebook_5_pane_1.SetSizer(grid_sizer_2)
        grid_sizer_3.Add(self.label_vidoverlay, 0, wx.EXPAND, 0)
        grid_sizer_3.Add(self.text_ctrl_vidoverlay, 0, wx.EXPAND, 0)
        grid_sizer_3.Add(self.label_3, 0, 0, 0)
        grid_sizer_3.Add(self.spin_ctrl_anchobanda, 0, wx.EXPAND, 0)
        grid_sizer_3.Add(self.label_3_copy_1, 0, 0, 0)
        grid_sizer_3.Add(self.slider_laterali, 0, wx.EXPAND, 0)
        grid_sizer_3.Add(self.label_3_copy, 0, 0, 0)
        grid_sizer_3.Add(self.slider_laterals, 0, wx.EXPAND, 0)
        grid_sizer_3.Add(self.label_calib, 0, 0, 0)
        grid_sizer_3.Add(self.slider_calib, 0, wx.EXPAND, 0)

        grid_sizer_3.Add(self.label_3_copy_copy, 0, 0, 0)
        grid_sizer_3.Add(self.spin_ctrl_filas, 0, wx.EXPAND, 0)
        grid_sizer_3.Add(self.radio_btn_1, 0, 0, 0)
        grid_sizer_3.Add(self.spin_ctrl_dispositivo, 0, wx.EXPAND, 0)
        grid_sizer_3.Add(self.radio_btn_2, 0, 0, 0)
        sizer_10.Add(self.text_ctrl_archivo, 0, wx.EXPAND, 0)
        sizer_10.Add(self.button_2, 0, wx.EXPAND, 0)
        grid_sizer_3.Add(sizer_10, 1, wx.EXPAND, 0)
        grid_sizer_3.Add(self.label_8, 0, 0, 0)
        sizer_9.Add(self.radio_btn_0, 0, 0, 0)
        sizer_9.Add(self.radio_btn_90, 0, 0, 0)
        sizer_9.Add(self.radio_btn_180, 0, 0, 0)
        sizer_9.Add(self.radio_btn_270, 0, 0, 0)
        grid_sizer_3.Add(sizer_9, 1, wx.EXPAND, 0)
        grid_sizer_3.Add(self.button_VidStart, 0, wx.EXPAND, 0)
        grid_sizer_3.Add(self.checkbox_iniciar, 0, wx.EXPAND, 0)
        grid_sizer_3.Fit

        self.notebook_7_pane_1.SetSizer(grid_sizer_3)
        grid_sizer_1.Add(self.Min_copy_5_copy_1, 0, wx.EXPAND, 0)
        grid_sizer_1.Add(self.combo_box_Objeto, 0, wx.EXPAND, 0)
        grid_sizer_1.Add(self.Min_copy_5, 0, wx.EXPAND, 0)
        grid_sizer_1.Add(self.slider_hmin, 0, wx.EXPAND, 0)
        grid_sizer_1.Add(self.Min_copy_2, 0, wx.EXPAND, 0)
        grid_sizer_1.Add(self.slider_hmax, 0, wx.EXPAND, 0)
        grid_sizer_1.Add(self.Min_copy, 0, wx.EXPAND, 0)
        grid_sizer_1.Add(self.slider_smin, 0, wx.EXPAND, 0)
        grid_sizer_1.Add(self.Min_copy_3, 0, wx.EXPAND, 0)
        grid_sizer_1.Add(self.slider_smax, 0, wx.EXPAND, 0)
        grid_sizer_1.Add(self.Min_copy_1, 0, wx.EXPAND, 0)
        grid_sizer_1.Add(self.slider_vmin, 0, wx.EXPAND, 0)
        grid_sizer_1.Add(self.Min_copy_4, 0, wx.EXPAND, 0)
        grid_sizer_1.Add(self.slider_vmax, 0, wx.EXPAND, 0)
        grid_sizer_1.Add(self.label_prefiltro, 0, wx.EXPAND, 0)
        grid_sizer_1.Add(self.slider_prefiltro, 0, wx.EXPAND, 0)
        grid_sizer_1.Add(self.Min_copy_5_copy, 0, wx.EXPAND, 0)
        grid_sizer_1.Add(self.slider_desperado, 0, wx.EXPAND, 0)
        self.notebook_7_pane_2.SetSizer(grid_sizer_1)
        grid_sizer_4.Add(self.label_1, 0, 0, 0)
        grid_sizer_4.Add(self.spin_button_display, 0, wx.EXPAND, 0)
        grid_sizer_4.Add(self.label_2, 0, 0, 0)
        grid_sizer_4.Add(self.spin_button_registro, 0, wx.EXPAND, 0)
        grid_sizer_4.Add(self.checkbox_csv, 0, 0, 0)
        grid_sizer_4.Add(self.checkbox_AdvOverlay, 0, 0, 0)
        self.notebook_7_pane_3.SetSizer(grid_sizer_4)
        self.notebook_7.AddPage(self.notebook_7_pane_1, "Sistema")
        self.notebook_7.AddPage(self.notebook_7_pane_2, "Objeto")
        self.notebook_7.AddPage(self.notebook_7_pane_3, "Registro")
        sizer_4.Add(self.notebook_7, 1, wx.EXPAND, 0)
        self.notebook_5_pane_2.SetSizer(sizer_4)
        sizer_8.Add(self.label_9, 0, wx.ALIGN_CENTER, 0)
        self.notebook_5_pane_3.SetSizer(sizer_8)
        self.notebook_5.AddPage(self.notebook_5_pane_1, "Acciones")
        self.notebook_5.AddPage(self.notebook_5_pane_2, "Opciones")

        sizer_3.Add(self.notebook_5, 1, wx.EXPAND, 0)

        self.notebook_5_pane_4.SetSizer(sizer_l)
        self.notebook_5_pane_5.SetSizer(sizer_d)
        self.notebook_5_pane_6.SetSizer(sizer_f)
        self.notebook_5_pane_7.SetSizer(sizer_sd)
        self.notebook_5_pane_8.SetSizer(sizer_st)
        self.notebook_5_pane_9.SetSizer(sizer_det)

        self.figure_l = Figure()
        self.axes_l = self.figure_l.add_subplot(111)
        self.canvas_l = FigureCanvas(self.notebook_5_pane_4, 0, self.figure_l)
        self.l_toolbar = NavigationToolbar(self.canvas_l)  # createa navigation toolbar for our plot canvas
        self.l_toolbar.Realize()
        sizer_l.Add(self.l_toolbar, 0, wx.LEFT | wx.EXPAND)
        self.l_toolbar.update()

        self.figure_d = Figure()
        self.axes_d = self.figure_d.add_subplot(111)
        self.canvas_d = FigureCanvas(self.notebook_5_pane_5, 0, self.figure_d)
        self.d_toolbar = NavigationToolbar(self.canvas_d)  # createa navigation toolbar for our plot canvas
        self.d_toolbar.Realize()
        sizer_d.Add(self.d_toolbar, 0, wx.LEFT | wx.EXPAND)
        self.d_toolbar.update()

        self.figure_f = Figure()
        self.axes_f = self.figure_f.add_subplot(111)
        self.canvas_f = FigureCanvas(self.notebook_5_pane_6, 0, self.figure_f)
        self.f_toolbar = NavigationToolbar(self.canvas_f)  # createa navigation toolbar for our plot canvas
        self.f_toolbar.Realize()
        sizer_f.Add(self.f_toolbar, 0, wx.LEFT | wx.EXPAND)
        self.f_toolbar.update()

        self.figure_sd = Figure()
        self.axes_sd = self.figure_sd.add_subplot(111)
        self.canvas_sd = FigureCanvas(self.notebook_5_pane_7, 0, self.figure_sd)
        self.sd_toolbar = NavigationToolbar(self.canvas_sd)  # createa navigation toolbar for our plot canvas
        self.sd_toolbar.Realize()
        sizer_sd.Add(self.sd_toolbar, 0, wx.LEFT | wx.EXPAND)
        self.sd_toolbar.update()

        self.figure_st = Figure()
        self.axes_st = self.figure_st.add_subplot(111)
        self.canvas_st = FigureCanvas(self.notebook_5_pane_8, 0, self.figure_st)
        self.st_toolbar = NavigationToolbar(self.canvas_st)  # createa navigation toolbar for our plot canvas
        self.st_toolbar.Realize()
        sizer_st.Add(self.st_toolbar, 0, wx.LEFT | wx.EXPAND)
        self.st_toolbar.update()

        self.figure_det = Figure()
        self.axes_det = self.figure_det.add_subplot(111)
        self.canvas_det = FigureCanvas(self.notebook_5_pane_9, 0, self.figure_det)
        self.det_toolbar = NavigationToolbar(self.canvas_det)  # createa navigation toolbar for our plot canvas
        self.det_toolbar.Realize()
        sizer_det.Add(self.det_toolbar, 0, wx.LEFT | wx.EXPAND)
        self.det_toolbar.update()

        self.notebook_5.AddPage(self.notebook_5_pane_7, u"Serie de tiempo - Di\u00e1metro")
        self.notebook_5.AddPage(self.notebook_5_pane_8, "Serie de tiempo - Tolerancias")

        self.notebook_5.AddPage(self.notebook_5_pane_4, "Histograma - Largo")
        self.notebook_5.AddPage(self.notebook_5_pane_5, u"Histograma - Di\u00e1metro")
        self.notebook_5.AddPage(self.notebook_5_pane_6, "Filas")
        self.notebook_5.AddPage(self.notebook_5_pane_9, "Detenciones")
        self.notebook_5.AddPage(self.notebook_5_pane_3, "Acerca de...")

        sizer_l.Add(self.canvas_l,  proportion=1, flag=wx.LEFT | wx.TOP | wx.GROW)
        sizer_d.Add(self.canvas_d, proportion=1, flag=wx.LEFT | wx.TOP | wx.GROW)
        sizer_f.Add(self.canvas_f, proportion=1, flag=wx.LEFT | wx.TOP | wx.GROW)
        sizer_sd.Add(self.canvas_sd, proportion=1, flag=wx.LEFT | wx.TOP | wx.GROW)
        sizer_st.Add(self.canvas_st, proportion=1, flag=wx.LEFT | wx.TOP | wx.GROW)
        sizer_det.Add(self.canvas_det, proportion=1, flag=wx.LEFT | wx.TOP | wx.GROW)

        #sizer_3.Add(self.notebook_21, 1, wx.EXPAND, 0)

        self.window_1_pane_2.SetSizer(sizer_3)
        self.window_1.SplitVertically(self.window_1_pane_1, self.window_1_pane_2, 100)
        sizer_1.Add(self.window_1, 1, wx.EXPAND, 0)
        self.SetSizer(sizer_1)
        self.Fit()

        if globvar.IniciaralInicio == True:
            self.VideoStart(wx.EVT_TOGGLEBUTTON)
            self.EnInicio(wx.EVT_TOGGLEBUTTON)

        self.Layout()

        # end wxGlade

    def VideoStart(self, event):  # wxGlade: wxVideoFrame.<event_handler>
        self.timer = wx.Timer(self)
        self.timer.Start(1000 / 30)
        self.Bind(wx.EVT_TIMER, self.onUpdate, self.timer)
        self.updating = False
        if globvar.IniciaralInicio == False:
            event.Skip()

    def EnInicio(self, event):  # wxGlade: wxVideoFrame.<event_handler>
        globvar.inicioanalisis = True
        # event.Skip()

    def EnComboTiempo(self, event):  # wxGlade: wxVideoFrame.<event_handler>
        print "Event handler 'EnComboTiempo' not implemented!"
        globvar.Selmin = globvar.LTiempos[globvar.LTiempos["Tiempo"]==self.combo_box_tiempo.GetValue()]["min"]
        SaveSettings(self)
        if event <> wx.EVT_TOGGLEBUTTON:
            event.Skip()

    def EnAnchoBanda(self, event):  # wxGlade: wxVideoFrame.<event_handler>
        print "Event handler 'EnAnchoBanda' not implemented!"
        SaveSettings(self)
        event.Skip()

    def EnLateralI(self, event):  # wxGlade: wxVideoFrame.<event_handler>
        print "Event handler 'EnLateralI' not implemented!"
        SaveSettings(self)
        event.Skip()

    def EnFilas(self, event):  # wxGlade: wxVideoFrame.<event_handler>
        print "Event handler 'EnFilas' not implemented!"
        SaveSettings(self)
        event.Skip()

    def VidDispoCtrl(self, event):  # wxGlade: wxVideoFrame.<event_handler>
        print "Event handler 'VidDispoCtrl' not implemented!"
        globvar.Dispositivo = self.spin_ctrl_dispositivo.GetValue()
        SaveSettings(self)
        event.Skip()

    def EnLateralS(self, event):  # wxGlade: wxVideoFrame.<event_handler>
        print "Event handler 'EnLateralS' not implemented!"
        SaveSettings(self)
        event.Skip()

    def EnCalib(self, event):  # wxGlade: wxVideoFrame.<event_handler>
        print "Event handler 'EnLateralS' not implemented!"
        SaveSettings(self)
        event.Skip()

    def VidDispo(self, event):  # wxGlade: wxVideoFrame.<event_handler>
        print "Event handler 'VidDispo' not implemented!"
        self.button_2.Disable()
        self.text_ctrl_archivo.Disable()
        self.spin_ctrl_dispositivo.Enable()
        SaveSettings(self)
        globvar.VideoWebCam = False
        event.Skip()

    def VidArchivo(self, event):  # wxGlade: wxVideoFrame.<event_handler>
        self.button_2.Enable()
        self.text_ctrl_archivo.Enable()
        self.spin_ctrl_dispositivo.Disable()
        SaveSettings(self)
        globvar.VideoWebCam = False
        event.Skip()

    def VideoArchivo(self, event):  # wxGlade: wxVideoFrame.<event_handler>
        print "Event handler 'VideoArchivo' not implemented!"
        SaveSettings(self)
        event.Skip()

    def Envidoverlay(self, event):  # wxGlade: wxVideoFrame.<event_handler>
        SaveSettings(self)
        event.Skip()


    def AbrirArchivo(self, event):  # wxGlade: wxVideoFrame.<event_handler>
        """
        Create and show the Open FileDialog
        """
        dlg = wx.FileDialog(
            self, message="Choose a file",
            defaultDir="/home/federico/Vídeos/",
            defaultFile="",
            wildcard="Videos (*.avi)|*.avi|" \
                     "Todos los archivos (*.*)|*.*",
            style=wx.FD_OPEN | wx.FD_CHANGE_DIR | wx.FD_FILE_MUST_EXIST
        )
        if dlg.ShowModal() == wx.ID_OK:
            self.text_ctrl_archivo.SetValue(str(dlg.GetPath().encode('utf-8')))
            SaveSettings(self)
        dlg.Destroy()
        event.Skip()

    def rot0(self, event):  # wxGlade: wxVideoFrame.<event_handler>
        print "Event handler 'rot0' not implemented!"
        SaveSettings(self)
        event.Skip()

    def rot90(self, event):  # wxGlade: wxVideoFrame.<event_handler>
        print "Event handler 'rot90' not implemented!"
        SaveSettings(self)
        event.Skip()

    def rot180(self, event):  # wxGlade: wxVideoFrame.<event_handler>
        print "Event handler 'rot180' not implemented!"
        SaveSettings(self)
        event.Skip()

    def rot270(self, event):  # wxGlade: wxVideoFrame.<event_handler>
        print "Event handler 'rot270' not implemented!"
        SaveSettings(self)
        event.Skip()

    def Iniciarmedicionauto(self, event):  # wxGlade: wxVideoFrame.<event_handler>
        SaveSettings(self)
        event.Skip()

    def EnObjeto(self, event):  # wxGlade: wxVideoFrame.<event_handler>
        globvar.LIE = globvar.Objetos[globvar.Objetos["Objeto"]==self.combo_box_Objeto.GetValue()]["LIE"]
        globvar.LSE = globvar.Objetos[globvar.Objetos["Objeto"]==self.combo_box_Objeto.GetValue()]["LSE"]

        SaveSettings(self)
        if event <> wx.EVT_TOGGLEBUTTON:
            event.Skip()

    def EnHMin(self, event):  # wxGlade: wxVideoFrame.<event_handler>
        print "Event handler 'EnHMin' not implemented!"
        SaveSettings(self)
        event.Skip()

    def EnHMax(self, event):  # wxGlade: wxVideoFrame.<event_handler>
        print "Event handler 'EnHMax' not implemented!"
        SaveSettings(self)
        event.Skip()

    def EnSMin(self, event):  # wxGlade: wxVideoFrame.<event_handler>
        print "Event handler 'EnSMin' not implemented!"
        SaveSettings(self)
        event.Skip()

    def EnSMax(self, event):  # wxGlade: wxVideoFrame.<event_handler>
        print "Event handler 'EnSMax' not implemented!"
        SaveSettings(self)
        event.Skip()

    def EnVMin(self, event):  # wxGlade: wxVideoFrame.<event_handler>
        print "Event handler 'EnVMin' not implemented!"
        SaveSettings(self)
        event.Skip()

    def EnVMax(self, event):  # wxGlade: wxVideoFrame.<event_handler>
        print "Event handler 'EnVMax' not implemented!"
        SaveSettings(self)
        event.Skip()

    def EnPrefiltro(self, event):  # wxGlade: wxVideoFrame.<event_handler>
        SaveSettings(self)
        event.Skip()

    def EnDesperado(self, event):  # wxGlade: wxVideoFrame.<event_handler>
        print "Event handler 'EnDesperado' not implemented!"
        SaveSettings(self)
        event.Skip()

    def EnDisplay(self, event):  # wxGlade: wxVideoFrame.<event_handler>
        print "Event handler 'EnDisplay' not implemented!"
        SaveSettings(self)
        event.Skip()

    def EnRegistro(self, event):  # wxGlade: wxVideoFrame.<event_handler>
        print "Event handler 'EnRegistro' not implemented!"
        SaveSettings(self)
        event.Skip()

    def EnCSV(self, event):  # wxGlade: wxVideoFrame.<event_handler>
        print "Event handler 'EnCSV' not implemented!"
        SaveSettings(self)
        event.Skip()

    def EnAdvOverlay(self, event):  # wxGlade: wxVideoFrame.<event_handler>
        print "Event handler 'EnAdvOverlay' not implemented!"
        SaveSettings(self)
        event.Skip()


# end of class wxVideoFrame

def SaveSettings(self):
    text_file = open(os.path.realpath(__file__)[:-len(os.path.basename(os.path.realpath(__file__)))] + "settings.ini",
                     "w")

    text_file.write(self.text_ctrl_vidoverlay.GetValue().encode('utf-8') + '\n')  # Settings 0
    text_file.write(str(self.combo_box_tiempo.GetValue().encode('utf-8')) + '\n')  # Settings 1
    text_file.write(str(self.spin_ctrl_anchobanda.GetValue()).encode('utf-8') + '\n')  # Settings 2
    text_file.write(str(self.slider_laterali.GetValue()).encode('utf-8') + '\n')  # Settings 3
    text_file.write(str(self.slider_laterals.GetValue()).encode('utf-8') + '\n')  # Settings 4
    text_file.write(str(self.spin_ctrl_filas.GetValue()).encode('utf-8') + '\n')  # Settings 5
    # Settings 6
    if self.radio_btn_1.GetValue() == 1:
        text_file.write('1\n')
    if self.radio_btn_2.GetValue() == 1:
        text_file.write('2\n')
    text_file.write(str(self.spin_ctrl_dispositivo.GetValue()) + '\n')  # Settings 7
    text_file.write(self.text_ctrl_archivo.GetValue().encode('utf-8') + '\n')  # Settings 8

    # Settings 9
    if self.radio_btn_0.GetValue() == 1:
        text_file.write('0\n')
    if self.radio_btn_90.GetValue() == 1:
        text_file.write('90\n')
    if self.radio_btn_180.GetValue() == 1:
        text_file.write('180\n')
    if self.radio_btn_270.GetValue() == 1:
        text_file.write('270\n')

    text_file.write(str(self.checkbox_iniciar.GetValue()).encode('utf-8') + '\n')  # Settings 10
    text_file.write(str(self.combo_box_Objeto.GetValue()).encode('utf-8') + '\n')  # Settings 11
    text_file.write(str(self.slider_hmin.GetValue()).encode('utf-8') + '\n')  # Settings 12
    text_file.write(str(self.slider_hmax.GetValue()).encode('utf-8') + '\n')  # Settings 13
    text_file.write(str(self.slider_smin.GetValue()).encode('utf-8') + '\n')  # Settings 14
    text_file.write(str(self.slider_smax.GetValue()).encode('utf-8') + '\n')  # Settings 15
    text_file.write(str(self.slider_vmin.GetValue()).encode('utf-8') + '\n')  # Settings 16
    text_file.write(str(self.slider_vmax.GetValue()).encode('utf-8') + '\n')  # Settings 17
    text_file.write(str(self.slider_desperado.GetValue()).encode('utf-8') + '\n')  # Settings 18
    text_file.write(str(self.slider_prefiltro.GetValue()).encode('utf-8') + '\n')  # Settings 18b
    text_file.write(str(self.spin_button_display.GetValue()).encode('utf-8') + '\n')  # Settings 19
    text_file.write(str(self.spin_button_registro.GetValue()).encode('utf-8') + '\n')  # Settings 20
    text_file.write(str(self.checkbox_csv.GetValue()).encode('utf-8') + '\n')  # Settings 21
    text_file.write(str(self.checkbox_AdvOverlay.GetValue()).encode('utf-8') + '\n')  # Settings 22

    text_file.write(str(self.slider_calib.GetValue()).encode('utf-8') + '\n')  # Settings 23
    text_file.write(str(globvar.TSi) + '\n')  # Settings 24
    text_file.close()

